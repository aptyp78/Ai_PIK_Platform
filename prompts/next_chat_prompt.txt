Контекст: IPMK визуальный конвейер (PVStack, GroundedDINO+SAM, OCR, LLM gpt-5-mini), единый индекс OpenAI, «живая» витрина (eval/visual_review.html, eval/progress.html). Цель — довести анализ и инжест до 100% по playbooks и frames, опубликовать результаты (опционально) в GCS.

Что нужно сделать:
- Подтвердить, что все PDF отрендерены в 300 dpi (out/page_images); при необходимости запустить prepare_inputs.
- Закрыть детекции для всех страниц (batch_gdino_sam2.py).
- Дожать LLM-анализ по всем регионам (analyze_detected_regions.py, профиль auto, OCR включён, PVStack канон).
- Обновить и проверить индекс (ingest_visual_artifacts.py), витрину и метрики.
- (Опционально) Опубликовать grounded_regions, visual_review.html и embeddings в gs://pik-artifacts-dev.

Команды (готовы к копированию):
1) Подготовка входов:
python scripts/prepare_inputs.py --playbooks /root/data/playbooks --frames /root/data/frames --out-root out/page_images --dpi 300

2) Детекции:
python scripts/batch_gdino_sam2.py --pages-root out/page_images --outdir out/visual/grounded_regions \
  --prompts diagram canvas table legend node arrow textbox \
  --grounding-model /root/models/groundingdino/groundingdino_swint_ogc.pth \
  --sam-model /root/models/sam/sam_vit_h_4b8939.pth

3) Анализ:
export OPENAI_API_KEY="$(cat 'Secrets/OpenAi API.key')"
python scripts/analyze_detected_regions.py --detected-dir out/visual/grounded_regions --all --outdir out/visual/grounded_regions \
  --profile auto --synonyms config/semantic_synonyms.yaml --weights config/visual_objects_weights.yaml \
  --tmpdir /tmp/tess_tmp --chat-model gpt-5-mini --skip-existing

4) Инжест:
python scripts/ingest_visual_artifacts.py --source-json "/root/data/playbook.json" --regions-dir out/visual/grounded_regions \
  --out out/openai_embeddings.ndjson --model text-embedding-3-large

5) Витрина/дашборд:
python scripts/generate_visual_review.py --regions-detect out/visual/grounded_regions --out eval/visual_review.html --inline --auto-refresh 5
python scripts/progress_dashboard.py --playbooks /root/data/playbooks --frames /root/data/frames \
  --pages-dir out/page_images --regions-dir out/visual/grounded_regions --index out/openai_embeddings.ndjson \
  --out eval/progress.html --auto-refresh 5
python -m http.server 8000 -d eval

6) Метрики:
export OPENAI_API_KEY="$(cat 'Secrets/OpenAi API.key')"
python scripts/eval_metrics.py --index out/openai_embeddings.ndjson --eval eval/queries.jsonl --prefer-visual

7) Публикация (опц.):
gsutil -m rsync -r out/visual/grounded_regions gs://pik-artifacts-dev/grounded_regions
gsutil cp eval/visual_review.html gs://pik-artifacts-dev/visual_review/visual_review.html
gsutil cp out/openai_embeddings.ndjson gs://pik-artifacts-dev/embeddings/openai_embeddings.ndjson

Если во время шага анализа/метрик нужна сеть — убедитесь, что OPENAI_API_KEY загружен и у сессии есть сетевой доступ. Если нужны фоновые процессы, используйте: bash scripts/start_services.sh

